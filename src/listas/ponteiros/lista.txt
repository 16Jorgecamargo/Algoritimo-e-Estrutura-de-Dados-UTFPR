=== Lista de Exercicios - Ponteiros ===

QUESTAO 01:
Enunciado: Sendo p um ponteiro, qual a diferenca entre:
-> p++;
-> (*p)++;
-> *(p++);
-> *(p+10);

Logica utilizada:
Pelo que eu entendo de ponteiros quando a gente tem um ponteiro exemplo: INT *P
e manuseamos ele somente com o p estamos retratando o endereco que ele esta apontando e 
quando fizemos isso com o asteristico estamos retratando ao conteudo.

ou seja:

p  => Endereco;
*p => Conteudo;

---

QUESTAO 02:
Enunciado: Escreva um comentario em cada comando de atribuicao explicando o que
ele faz e o valor da variavel a esquerda do '=' apos sua execucao.
int main()
{
  int y, *p, x;
  y = 0;
  p = &y;
  x = *p;
  x = 4;
  (*p)++;
  x--;
  (*p) += x;
  printf ("y = %d\n", y);
  return(0);
} 

Logica utilizada:
A logica eh que tecnicamente y e p sao a mesma coisa pois quando atribuimos o endereco de y a p,
quando manipulamos o p, estamos manimulando o y.

---

QUESTAO 03:
Enunciado: Verifique o programa abaixo. Encontre o seu erro e corrija-o para que
escreva o numero 10 na tela.
#include <stdio.h>
int main() {
 int x, *p, **q;
 p = &x;
 q = &p;
 x = 10;
 printf("\n%d\n", &q);
 return(0);
}

Logica utilizada:
Primeiramente o &q esta tentando passar o endereco de q ao inves do conteudo de q,
entao so corrigi o que ele estava passado para o %d.
mas mesmo se ele quisesse mostrar o endereco do q no console nao seria dessa forma. 
usaria printf("%p",(void *)&q);

---

QUESTAO 04:
Enunciado: Crie um vetor V com n inteiros, onde n eh um valor inteiro fornecido pelo
usuario. O vetor so deve ser alocado na memoria depois que o usuario
fornecer o valor de n.

Exemplo de entrada: 9
Exemplo de saida: v[9] = {1,2,3,4,5,6,7,8,9}

Logica utilizada:
A logica que eu usei foi so criar um vetor sem tamanho defino inicialmente, 
e alocar ele com o malloc e com o tamanho passado pelo usuario.

---

QUESTAO 05:
Enunciado: Crie um programa para manipular vetores com ponteiros. O seu programa
deve implementar uma funcao chamada inverte_vetor, que recebe como
parametro dois vetores V1 e V2, ambos de tamanho N. A funcao deve copiar
os elementos de V1 para V2 na ordem inversa. Ou seja, se a funcao receber
V1 = {1,2,3,4,5}, a funcao deve copiar os elementos para V2 na seguinte
ordem: V2 = {5,4,3,2,1}. Alem disso, a funcao tambem deve retornar o maior
valor encontrado em V1. A funcao deve obedecer ao seguinte prototipo: 
int inverte_vetor(int *v1, int *v2, int n).

Exemplo de entrada: v1 = {3,5,2,1,6,2,7}
Exemplo de saida: v2 = {7,2,6,1,2,5,3}

Logica utilizada:
A ideia que eu usei foi de pegar um vetor e povoar outro com os elementos na ordem inversa.
se eu tenho {1,2,3,4,5}, 
quero que o novo fique {5,4,3,2,1}

e para pegar o maior so comparei os conteudos do vetor, 
atribuindo a uma variavel quando era maior.

---

QUESTAO 06:
Enunciado: Escreva um programa em linguagem C que imprimam na tela a string s na
ordem inversa utilizando ponteiros.
char s[10] = "abcde";
char* cptr;

Exemplo de entrada: "abcde"
Exemplo de saida: "edcba"

Logica utilizada:
A logica que usei foi de usar recursao pra imprimir a string de tras pra frente ate chegar no '\0',
ela volta imprimindo cada caractere como se fosse um pilha.

---

QUESTAO 07:
Enunciado: []

Exemplo de entrada: []
Exemplo de saida: []

Logica utilizada:
[]

---

QUESTAO 08:
Enunciado: []

Exemplo de entrada: []
Exemplo de saida: []

Logica utilizada:
[]

---

QUESTAO 09:
Enunciado: []

Exemplo de entrada: []
Exemplo de saida: []

Logica utilizada:
[]

---