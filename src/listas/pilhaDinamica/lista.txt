=== Lista de Exercicios - Pilha Dinamica ===

QUESTAO 01: 
Enunciado: Faca um programa que tenha uma nova funcao chamada pop2() para
desempilhar dois elementos da pilha e uma outra funcao chamada
push2() para empilhar 2 elementos a partir do topo da pilha. Nao devem
ser utilizadas as funcoes de push e pop ja existentes. 

Logica utilizada:
- Pilha implementada com lista ligada de inteiros e ponteiro para o topo.
- `push2` aloca duas novas celulas e as encadeia diretamente, posicionando o segundo elemento como novo topo.
- `pop2` remove dois elementos consecutivos, devolvendo os valores retirados e atualizando o topo da pilha.
- Uma interface interativa permite empilhar e desempilhar pares de valores, facilitando os testes da funcao.

---

QUESTAO 02:
Enunciado: Faca um programa que tenha uma nova funcao chamada popN() para
desempilhar n elementos a partir do topo da pilha. Nao devem ser
utilizadas as funcoes de push e pop ja existentes.

Logica utilizada:
- Remove iterativamente ate `n` elementos do topo, guardando os valores em um vetor auxiliar para exibicao.
- Interrompe a remocao caso a pilha termine antes de atingir `n`, informando quantos elementos foram efetivamente retirados.
- Um modo interativo permite que o usuario defina a pilha inicial e o valor de `n` para testar diferentes cenarios.

---

QUESTAO 03:
Enunciado: Faca um programa que utilizando apenas as funcoes desenvolvidas
para a pilha, implemente uma funcao que receba uma pilha como
parametro e retorna como resultado uma copia dessa pilha. 
Essa funcao deve obedecer ao prototipo:
Pilha *pilha_copia (Pilha* p);
Obs.: Ao final da funcao copia_pilha, a pilha p recebida como parametro
deve estar no mesmo estado em que ela comecou a funcao

Logica utilizada:
- Utiliza uma pilha auxiliar para esvaziar a pilha original preservando a ordem dos elementos.
- Ao devolver cada elemento para a pilha original, ele e simultaneamente empilhado na pilha copia.
- A abordagem nao exige estrutura extra e garante que a pilha de entrada seja restaurada ao final do procedimento.

---

QUESTAO 04:
Enunciado: Dado uma pilha que armazene numeros, escreva uma funcao que
forneca o maior, o menor e a media aritmetica dos elementos da pilha. 

Logica utilizada:
- Percorre a pilha movendo os elementos para uma pilha auxiliar enquanto calcula soma, menor e maior valor.
- Depois de calcular as estatisticas, devolve todos os elementos da pilha auxiliar para restaurar o estado original.
- A media aritmetica e obtida dividindo a soma acumulada pela quantidade de elementos visitados.

---

QUESTAO 05:
Enunciado: Faca um programa que utilizando apenas as funcoes desenvolvidas
para a pilha, implemente uma funcao que teste se duas pilhas sao iguais
ou Nao.

Logica utilizada:
- Remove simultaneamente os elementos das duas pilhas comparando os valores retirados.
- Cada valor e guardado em pilhas auxiliares, permitindo restaurar as duas pilhas ao final da verificacao.
- Diferencas de tamanho ou de conteudo interrompem a comparacao e indicam que as pilhas nao sao identicas.

---

QUESTAO 06:
Enunciado: Escreva um programa solicite ao usuario uma sequencia de caracteres
sem limite de tamanho máximo e realize as seguintes operacoes usando
uma pilha:
a) Imprimir o texto na ordem inversa;
b) Verificar se o texto eh um palindromo, ou seja, se o texto eh escrito da
mesma maneira de frente para tras e de tras para frente. Ignore espacos
e pontos.

Logica utilizada:
- Empilha cada caractere do texto para obter a versao invertida ao desempilhar.
- Para o teste de palindromo, ignora espacos e pontos e compara o texto sanitizado com a sequencia invertida.
- Toda a logica de reversao e validacao usa apenas operacoes de pilha para manipular os caracteres.

---

QUESTAO 07:
Enunciado: Faca uma funcao para retornar o numero de elementos da pilha que
possuem valor par e o numero de elementos com valor impar

Logica utilizada:
- A pilha e percorrida inteiramente, movendo os elementos para uma pilha auxiliar enquanto os valores pares e impares sao contabilizados.
- Ao final os elementos retornam para a pilha original, preservando a estrutura inicial.
- Os contadores gerados sao exibidos junto ao tamanho total da pilha.

---

QUESTAO 08:
Enunciado: Faca um programa para determinar se uma cadeia de caracteres (string)
eh da forma:
x C y
onde x e y sao cadeias de caracteres compostas por letras "A" e/ou "B", e y eh
o inverso de x. Isto eh, se x = "ABABBA", y deve equivaler a "BABAAB". Em
cada ponto, voce so podera ler o proximo caractere da cadeia.

Logica utilizada:
- Empilha a porção `x` da cadeia até encontrar o caractere `C`, aceitando apenas letras `A` ou `B`.
- Após o `C`, cada caractere de `y` é confrontado com o topo da pilha; discrepâncias invalidam a sequência.
- A pilha deve estar vazia ao final da leitura, garantindo que `y` seja exatamente o inverso de `x`.

---

QUESTAO 09:
Enunciado: Faca um programa que apresente um menu continuo com as seguintes
opcoes e execute de acordo com a escolha do usuario.
void menu()
{
 printf("1-Inicializa pilha.\n");
 printf("2-Verifica se a pilha e vazia.\n");
 printf("3-Verifica se a pilha e cheia.\n");
 printf("4-Empilha o elemento na pilha.\n");
 printf("5-Desempilha elemento da pilha.\n");
 printf("6-Le topo de um pilha.\n");
 printf("7-Converte um numero decimal em binario.\n");
 printf("8-Sair.\n");
}

Logica utilizada:
- Loop interativo que reaproveita as operacoes padrao da pilha dinamica (empilhar, desempilhar, consultar topo e verificar vazia).
- A opcao de conversao decimal->binario empilha os restos da divisao por dois e imprime os bits na ordem correta.
- Todas as opcoes validam se a pilha foi inicializada antes de executar as operacoes.
- O menu permanece ativo ate o usuario selecionar "Sair".

---
