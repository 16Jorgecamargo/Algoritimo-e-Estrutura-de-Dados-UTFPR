=== Lista de Exercicios - Recursividade ===

QUESTAO 01:
Enunciado: Faca uma funcao recursiva que permita inverter um numero inteiro N.

Exemplo de entrada: 123
Exemplo de saida: Numero invertido: 321

Logica utilizada:
- Converto o numero para valor absoluto e trato o sinal ao final.
- Cada chamada multiplica o acumulado por 10 e adiciona o ultimo digito (n % 10).
- O caso base ocorre quando n == 0; nesse ponto devolvemos o acumulado.
- Estrutura recursiva: inverterRec(n, acumulado) chama inverterRec(n/10, acumulado*10 + ultimoDigito) ate esgotar os digitos.

---

QUESTAO 02:
Enunciado: Faca uma funcao recursiva que permita somar os elementos de um vetor de inteiros.

Exemplo de entrada: {1,2,3,4}
Exemplo de saida: 10

Logica utilizada:
- Caso base: vetor vazio (tamanho == 0) retorna 0.
- Passo recursivo: soma(vetor, n) = vetor[0] + soma(vetor+1, n-1).
- A pilha devolve os resultados parciais ate reconstruir o total.
- Complexidade linear: uma chamada por elemento, ideal para provas por inducao.

---

QUESTAO 03:
Enunciado: Crie uma funcao recursiva que receba um numero inteiro positivo N e calcule o somatorio de 1 a N.

Exemplo de entrada: 5
Exemplo de saida: 15

Logica utilizada:
- Caso base: N <= 0 retorna 0.
- Passo recursivo: somatorio(N) = N + somatorio(N-1).
- A pilha acumula os valores conforme retorna do caso base.
- Complexidade O(N) e profundidade igual ao valor de entrada.

---

QUESTAO 04:
Enunciado: Escreva uma funcao recursiva que receba k e n e calcule k^n usando apenas multiplicacoes.

Exemplo de entrada: 3 4
Exemplo de saida: 81

Logica utilizada:
- Caso base: qualquer numero elevado a 0 vale 1.
- Passo recursivo: potencia(k, n) = k * potencia(k, n-1).
- O expoente diminui a cada chamada ate chegar ao caso base.
- Complexidade linear no expoente; cada chamada remove uma unidade de n.

---

QUESTAO 05:
Enunciado: Dado um vetor de numeros reais, escreva uma funcao recursiva que inverta sua ordem.

Exemplo de entrada: {3.3, 1.5, 7.8, 5.5, 4.2}
Exemplo de saida: {4.2, 5.5, 7.8, 1.5, 3.3}

Logica utilizada:
- Troca os elementos nas extremidades (inicio e fim) e avanca uma posicao para dentro.
- Caso base: inicio >= fim indica que o vetor ja esta invertido.
- Nenhum laco explicito e necessario; a pilha garante que todos os pares sejam permutados.
- Complexidade O(n) trocas e profundidade ~ n/2.

---

QUESTAO 06:
Enunciado: Implemente o algoritmo de Euclides recursivo para calcular o maximo divisor comum de x e y.

Exemplo de entrada: 48 18
Exemplo de saida: 6

Logica utilizada:
- Caso base: mdc(x, 0) = x.
- Passo recursivo: mdc(x, y) = mdc(y, x % y).
- A cada chamada o segundo argumento diminui, garantindo terminacao.
- Complexidade O(log(min(x, y))) como no algoritmo de Euclides iterativo.

---

QUESTAO 07:
Enunciado: Escreva uma funcao recursiva que determine quantas vezes o digito K ocorre em N.

Exemplo de entrada: K=2, N=762021192
Exemplo de saida: 3

Logica utilizada:
- Caso base: quando N == 0 retornamos 0 (tratar N original igual a zero separadamente).
- Passo recursivo: compara o ultimo digito (N % 10) com K e soma o resultado a contar(N/10, K).
- Trabalhamos com o valor absoluto de N para simplificar o processamento.
- Profundidade recursiva proporcional ao numero de digitos de N.

---

QUESTAO 08:
Enunciado: Proponha um algoritmo recursivo Multip_Rec(n1, n2) que realize multiplicacao por somas sucessivas.

Exemplo de entrada: 7 4
Exemplo de saida: 28

Logica utilizada:
- Defino o sinal final a partir dos operandos.
- Caso base: multiplicador == 0 retorna 0.
- Passo recursivo: resultado = multiplicando + Multip_Rec(multiplicando, multiplicador-1).
- Complexidade O(|multiplicador|) somas; profundidades altas podem estourar a pilha.

---

QUESTAO 09:
Enunciado: Faca uma funcao recursiva que receba um inteiro par N e imprima os pares de 0 a N em ordem crescente.

Exemplo de entrada: 12
Exemplo de saida: 0 2 4 6 8 10 12

Logica utilizada:
- A funcao imprime o valor atual e chama a si mesma com atual + 2.
- Caso base: quando atual ultrapassa o limite, a recursao termina.
- O inicio padrao e 0 para garantir a sequencia completa.
- Profundidade recursiva aproximada de N/2 + 1 chamadas.

---

QUESTAO 10:
Enunciado: Faca uma funcao recursiva que receba N e imprima os naturais de N ate 0 em ordem decrescente.

Exemplo de entrada: 10
Exemplo de saida: 10 9 8 7 6 5 4 3 2 1 0

Logica utilizada:
- Caso base: atual < 0 encerra a recursao.
- Passo recursivo: imprime o valor atual e chama com atual - 1.
- A ordem decrescente surge porque imprimimos antes da proxima chamada.
- Complexidade O(N) e nenhuma estrutura auxiliar e necessaria.

---

QUESTAO 11:
Enunciado: Escreva uma funcao recursiva que receba um numero inteiro par N e imprima os pares de N ate 0 em ordem decrescente.

Exemplo de entrada: 10
Exemplo de saida: 10 8 6 4 2 0

Logica utilizada:
- Inicia a partir do proprio limite, garantindo que apenas pares sejam impressos.
- Caso base: atual < 0 interrompe a recursao.
- Passo recursivo: imprime atual e chama novamente com atual - 2.
- Complexidade O(N/2) e controle natural de paridade ao decrementar de 2 em 2.

---

QUESTAO 12:
Enunciado: Implemente uma funcao recursiva que calcule o fatorial duplo de um inteiro impar positivo N.

Exemplo de entrada: 9
Exemplo de saida: 945

Logica utilizada:
- Caso base: N <= 1 retorna 1.
- Passo recursivo: N!! = N * (N-2)!!, reduzindo sempre dois em dois.
- Apenas numeros impares sao aceitos; valores pares sao rejeitados antes da chamada.
- Profundidade aproximadamente N/2; atencao a overflow quando N cresce.

---
